plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'maven'
}

group 'com.gloryjewel'
version '2.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()

}

dependencies {
    compile project(':magic-moja')
    compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.10.10'
    compile group: 'cglib', name: 'cglib', version: '3.3.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //annotationProcessor 'com.google.auto.service:auto-service:1.0-rc7'
    annotationProcessor project(':magic-moja')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
//    finalizedBy 'jacocoTestReport'
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.5'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "${project.reporting.baseDir}/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.enabled true
        xml.enabled false
        csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
    }
}

jacocoTestCoverageVerification {
    // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }
        }
    }
}

bootJar {
    enabled = false
}
jar{
    enabled = true
}

ext {
    javaMainClass = "com.gloryjewel.the.java.bytecode.ByteBuddyMain"
}

task run(type: Exec) {
    dependsOn build
    group = "javaagent"
    description = "Run the main class with ExecTask"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), "-javaagent:/Users/youngju/Desktop/test/java-agent/build/libs/java-agent.jar", javaMainClass
    //println sourceSets.main.runtimeClasspath.getAsPath()
}